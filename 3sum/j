(	// functions used....	var loadSamples;	var grainulator;	var simpleSampler;	var chopSampler;	var zoner;	var ratio;	var reverb;	var cue;	var midiKey;	var samplePlayer;	var peder;		var synthKey;	var anaSynth;		// globals	var sampleBank;	var wind,box1,box2;	wind = GUIWindow.new("panel", Rect.new( 740, 80, 951, 270 ));	box1 = CheckBoxView.new( wind, Rect.new( 38, 34, 166, 54 ), "beat", 0, 0, 1, 0, 'linear');	box2 = CheckBoxView.new( wind, Rect.new( 38, 64, 166, 84 ), "RUN", 0, 0, 1, 0, 'linear');	sampleBank = List.new;		//----------------------------------------------------	// loadSamples function :	// receives array of sound filenames and loads details into	// global sampleBank.	loadSamples = { arg ...fArray;		fArray.do({ arg item, i; 			sampleBank.add(SoundFile.new);			if ( (sampleBank.at(i)).read(item), {				//s = sampleBank.at(i);				//("sample '"++item++"' size = "++s.numFrames++"\n").post;			},{				(item ++ "not found\n").post;			});		});		};	//----------------------------------------------------	//----------------------------------------------------	// simpleSampler function :	simpleSampler = { arg sample,pitch,chop,rat,sus,loop,rand;			var step=0;				Spawn.ar({ arg spawn;			var signal,env,xfadelen = 0.004,looplength,offset;						k = Plug.kr(0);			// do some maths			signal = sample.data.at(0);						offset = (signal.size / chop) * step;			if ( (step+1) >= chop, {step = 0}, {step = step +1});						looplength = ((signal.size  / sample.sampleRate) / chop / (pitch/rat));			spawn.nextTime =looplength;			looplength = looplength * sus;			env = Env.linen(xfadelen, looplength - xfadelen, xfadelen, 1, \welch);						PlayBuf.ar(signal, sample.sampleRate,(pitch/rat), 				offset, 0, signal.size-64, EnvGen.ar(env));		},1,1);	};		//----------------------------------------------------	//----------------------------------------------------	// chopSampler function :	chopSampler = { arg sample,pitch,chop,rat,sus,loop,rand;			var step=0;				Spawn.ar({ arg spawn;			var signal,env,xfadelen = 0.002,looplength,offset;			var env1,env2;			env1 = Env.linen(0.01, 0.8, 0.23);			env2 = Env.linen(0.02, 0.3, 0.9);						k = Plug.kr(0);			// do some maths			signal = sample.data.at(0);			//			offset = (signal.size / chop) * step;//			if ( (step+1) >= chop, {step = 0}, {step = step +1});			offset = (signal.size / chop) * rand.xrand;						looplength = ((signal.size  / sample.sampleRate) / chop / (pitch/rat));			spawn.nextTime =looplength;			looplength = looplength * sus;			env = Env.linen(xfadelen, looplength - xfadelen, xfadelen, 1, \welch);						PlayBuf.ar(signal, sample.sampleRate,(pitch/rat)* MIDIController.kr(1,1,-1.000,1.000,'linear'), 				offset, 0, signal.size-64,			EnvGen2.kr(env1, env2,0.004, timeScale: looplength ));		},1,1);	};		//----------------------------------------------------	// zoner function :	zoner = { arg func, boundsRect;		var x, y;		x = MouseX.kr;		y = MouseY.kr;		Pause.ar(					func, 			(x >= boundsRect.left) * (x < boundsRect.right)			* (y >= boundsRect.top) * (y < boundsRect.bottom))	};	//----------------------------------------------------	// cue function :	cue = { arg func, obj;			Pause.ar({ func },obj.kr(0));	};	//----------------------------------------------------	// peder function :	peder = { arg func, min,max;		var p;		p = MIDIController.kr(1,64,min,max,'linear',0.001);		Pause.ar(			func, 			p			)	};	//----------------------------------------------------	// ratio function :	ratio = { arg sample1, sample2;		var signal1, signal2;		signal1 = sample1.data.at(0);		signal2 = sample2.data.at(0);			(signal1.size/ sample1.sampleRate) / (signal2.size/ sample2.sampleRate);	};	//----------------------------------------------------	// reverb function :	reverb = {arg in,amount;			Mix.ar([			AllpassN.ar(in, amount, [amount.rand,amount.rand], 0.1,0.145),			AllpassN.ar(in, amount, [amount.rand,amount.rand], 0.2,0.23),			AllpassN.ar(in, amount, [amount.rand,amount.rand], 0.13,0.11)		])+in;	};	//----------------------------------------------------	// sPlayer :		samplePlayer = { arg sample,n;			var	sig;		var 	table;		var	ptch;				ptch = (((n+24).midicps) / 400) * MIDIController.kr(1,7,-1.000,1.000,'linear');				table = Signal[1,2,4,8,16,32,64];		r = Index.kr(table,MIDIController.kr(1,10,0,table.size,'linear'));		sig = sample.data.at(0);		l = sig.size -32 ;				p = sig.size - (sig.size/r);				PlayBuf.ar(sig,sample.sampleRate,ptch,p,p,p+l);	};	//----------------------------------------------------	// midiKey function :	midiKey = { arg sample;			Voicer.ar({ arg voicer, i, synth, deltaTime, channel, note, velocity;				var ts,sig,env;			if (note < 50 , {				env = Env.adsr(0.01, 1.0, 1.0, 0.1, 1, -4);								sig = samplePlayer.value(sample,note);												ts = 0.1;//MIDIController.kr(1,11,0.1,10.0);//MouseY.kr(0.1,5.0);						EnvGen.ar(env, sig, 0, 1, 0, ts);			});						},1,1,8)	};	// midiKey function :	synthKey = { arg val;			Voicer.ar({ arg voicer, i, synth, deltaTime, channel, note, velocity;				var ts,fq,sig,env;			if (note > 50 , {				env = Env.adsr(0.01, 1.0, 0.25, 2.0, 1, -4);				fq = (note+24).midicps;				sig = anaSynth.value(fq/val);								ts =2;// MIDIController.kr(1,91,0.1,4.0);//MouseY.kr(0.1,5.0);						EnvGen.ar(env, sig, 0, 1, 0, ts);			});						},1,1,8)	};	//----------------------------------------------------	// anaSynth function :	anaSynth = { arg frq;		var n;				n = 1/frq;				a = SinOsc.ar(frq*0.5,0,0.001)+SinOsc.ar(frq*1.03,0,0.001)+SinOsc.ar(frq*8.01,0,0.0001) ;//* WhiteNoise.ar(0.01);				Pan2.ar(CombA.ar(a, 0.01, n, n * 1000), 1.0.rand2)	};		//----------------------------------------------------	// MAIN		// load samples	//loadSamples.value(":Sounds:STR.1",":Sounds:ss.aif",":Sounds:f4.aif") ;	//loadSamples.value(":Sounds:STR.1",":Sounds:hh.aif",":Sounds:orchhits.aif") ;	loadSamples.value(":Sounds:Untitled 88.AIF",":Sounds:080-UNIT04.aif",":Sounds:f4.aif") ;	a = 4;		Synth.scope({arg synth;		r = ratio.value(sampleBank.at(0),sampleBank.at(1));		p =0.98;//* (120/159.807)*2;				r=r/1;		a = chopSampler.value(sampleBank.at(0),p,1,1,1,inf,1);		b = chopSampler.value(sampleBank.at(0),p,16,1,0.8,inf,16);		c = chopSampler.value(sampleBank.at(0),p,4,1,0.5,inf,32);		d = chopSampler.value(sampleBank.at(0),p,3,1,0.6,inf,16);		e = chopSampler.value(sampleBank.at(1),p,1,r,1,inf,16);		f = chopSampler.value(sampleBank.at(1),p,16,r,0.8,inf,16);		g = chopSampler.value(sampleBank.at(1),p,8,r,0.5,inf,16);		h = chopSampler.value(sampleBank.at(1),p,12,r,0.4,inf,4);						z = Mix.ar([			peder.value( zoner.value({ a}, Rect.new(0, 0, 0.5, 0.75)),1,0)*MIDIController.kr(1,11,0.0001,1.0) ,			peder.value( zoner.value({ c}, Rect.new(0.5, 0, 1, 0.75)),1,0)*MIDIController.kr(1,11,0.0001,1.0) ,			peder.value( zoner.value({ e}, Rect.new(0, 0.5, 0.5, 1)),1,0)*MIDIController.kr(1,12,0.0001,1.0) ,			peder.value( zoner.value({ g}, Rect.new(0.5, 0.5, 1, 1)),1,0)*MIDIController.kr(1,12,0.0001,1.0) ,			peder.value( zoner.value({ b}, Rect.new(0, 0, 0.5, 0.75)),0,1)*MIDIController.kr(1,11,0.0001,1.0) ,			peder.value( zoner.value({ d}, Rect.new(0.5, 0, 1, 0.75)),0,1)*MIDIController.kr(1,11,0.0001,1.0) ,			peder.value( zoner.value({ f}, Rect.new(0, 0.5, 0.5, 1)),0,1)*MIDIController.kr(1,12,0.0001,1.0) ,			peder.value( zoner.value({ h}, Rect.new(0.5, 0.5, 1, 1)),0,1)*MIDIController.kr(1,12,0.0001,1.0) 				]);		y = midiKey.value(sampleBank.at(2))*MIDIController.kr(1,13,0.0001,2.0);				x = synthKey.value(0.5)*MIDIController.kr(1,91,0.0001,8,'linear');		Mix.ar([reverb.value(z+y+x,0.29),reverb.value(z+y+x,0.04)]);		//Pan2.ar(z,-1,1) + Pan2.ar(x+y,1,1);			});wind.close;)