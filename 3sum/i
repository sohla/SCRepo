(	// functions used....	var loadSamples;	var chopSampler;	var zoner;	var peder;	var ratio;	var midiKey;	var samplePlayer;	var reverb;	var tempoView;	var synthKey;	var anaSynth;			// globals	var sampleBank;	var wind,numV;	wind = GUIWindow.new("panel", Rect.new( 740, 80, 951, 270 ));	numV = NumericalView.new( wind, Rect.newBy(9, 9, 64, 20), "NumericalView", 0, -1e+10, 1e+10, 0, 'linear');	sampleBank = List.new;		//----------------------------------------------------	// loadSamples function :	// receives array of sound filenames and loads details into	// global sampleBank.	loadSamples = { arg ...fArray;		fArray.do({ arg item, i; 			sampleBank.add(SoundFile.new);			if ( (sampleBank.at(i)).read(item), {},{(item ++ "not found\n").post;});		});		};	//----------------------------------------------------	// ratio function :	ratio = { arg sample1, sample2;		var signal1, signal2;		signal1 = sample1.data.at(0);		signal2 = sample2.data.at(0);			(signal1.size/ sample1.sampleRate) / (signal2.size/ sample2.sampleRate);	};	//----------------------------------------------------	// zoner function :	zoner = { arg func, boundsRect;		var x, y;		x = MouseX.kr;		y = MouseY.kr;		Pause.ar(			func, 			(x>=boundsRect.left)*(x<boundsRect.right)*(y>=boundsRect.top)*(y<boundsRect.bottom)			)	};	//----------------------------------------------------	// reverb function :	reverb = {arg in,amount;			Mix.ar([			AllpassN.ar(in, amount, [amount.rand,amount.rand], 0.2,0.245),			AllpassN.ar(in, amount, [amount.rand,amount.rand], 0.2,0.23),			AllpassN.ar(in, amount, [amount.rand,amount.rand], 0.23,0.21)		])+in;	};	//----------------------------------------------------	// peder function :	peder = { arg func, min,max;		var p;		p = MIDIController.kr(1,64,min,max,'linear',0.001);		Pause.ar(			func, 			p			)	};	//----------------------------------------------------	// chopSampler function :	chopSampler = { arg sample,pitch,chop,ratio,sus,loop,rand,loopend;			var step=0;				Spawn.ar({ arg spawn;			var signal,env,looplength,offset,table,ndx,pch,pedal,swch;						pedal = MIDIController.kr(1,64,0,2,'linear',0.0001).abs;			swch = ToggleFF.ar(a-1);						// scale pitch table			table = Signal[1,2,8];			ndx = Index.kr(table,MIDIController.kr(1,1,0,table.size,'linear'));			pch = (pitch/ratio)*(1/ndx);//* MIDIController.kr(1,1,-1.0,1.0,'linear');			// calc. length of loop in time			signal = sample.data.at(0);			offset = (signal.size / chop) * rand.xrand;						a = (signal.size  / sample.sampleRate);			b = (pitch/ratio);			c = chop;						looplength = (a / b / c ) ;//* MIDIController.kr(1,11,1,0.1,'linear');						//looplength = ((signal.size  / sample.sampleRate) / chop / (pitch/ratio));									spawn.nextTime =looplength;						env = Env.linen(0.004, looplength * sus, 0.004);						loopend = (signal.size-64);						PlayBuf.ar(signal, sample.sampleRate,pch,offset, 0, loopend,EnvGen.kr(env));				},1,1);	};		//----------------------------------------------------	// sPlayer :		samplePlayer = { arg sample,n;			var	sig;		var	ptch;				ptch = (((n+24).midicps) / 400) * MIDIController.kr(1,7,-1.040,1.040,'linear',0.1)*0.5;		sig = sample.data.at(0);		l = (sig.size -128) ;		p = 0;		PlayBuf.ar(sig,sample.sampleRate,ptch,p,p,p+l);	};	//----------------------------------------------------	// midiKey function :	midiKey = { arg sample;			Voicer.ar({ arg voicer, i, synth, deltaTime, channel, note, velocity;			var ts,sig,env;			if (note < 50 , {				env = Env.adsr(0.01, 1.0, 1.0, 0.1, 1, -4);				sig = samplePlayer.value(sample,note);				ts =8;//MIDIController.kr(1,11,0.1,10.0);//MouseY.kr(0.1,5.0);				EnvGen.ar(env, sig, 0, 1, 0, ts);			});		},1,1,8)	};		//----------------------------------------------------	//tempoView	tempoView = {arg sample,beat;		var signal;		signal = sample.data.at(0);		numV.value = 60 / (signal.size / sample.sampleRate) * beat;		//numV.value = (signal.size / sample.sampleRate)/4;	};	//----------------------------------------------------	//synthKey	synthKey = { arg val;			Voicer.ar({ arg voicer, i, synth, deltaTime, channel, note, velocity;				var ts,fq,sig,env;			env = Env.adsr(2.001, 1.0, 0.25, 4.0, 1, -4);			if (note > 50 , {				fq = (note+24).midicps;				sig = anaSynth.value(fq/val);								ts = 2;//MIDIController.kr(1,91,0.1,4.0);//MouseY.kr(0.1,5.0);						EnvGen.ar(env, sig, 0, 1, 0, ts);			});						},1,1,8)	};	//----------------------------------------------------	// anaSynth function :	anaSynth = { arg frq;	var e,  specList, tring;	tring = #[3, 3, 3, 3];	specList	= [  				`[ [32,43,54, 89].midicps, nil, tring ],				`[ [10,34,80,120].midicps, nil, tring ],				`[ [67,88,90,100].midicps, nil, tring ],				`[ [14,23,34, 45].midicps, nil, tring ],				`[ [76,88,99,124].midicps, nil, tring ]			] ;	e = Env.sine(4,1);       EnvGen.ar( e,Klank.ar( specList.wrapAt(1),PinkNoise.ar([0.001,0.001]),frq/32))			};			//----------------------------------------------------	// MAIN	//----------------------------------------------------	//loadSamples.value(":Sounds:PC214_90_DrumLoop02.AIF",":Sounds:eb1.aif",":Sounds:toy2.aif") ;	loadSamples.value(":Sounds:bf.aif",":Sounds:dk1.aif",":Sounds:toy2.aif") ;	Synth.scope({arg synth;		tempoView.value(sampleBank.at(0),8);		r = ratio.value(sampleBank.at(0),sampleBank.at(1));		p =1.254;//* (120/159.807)*2;				r=r/1;		a = chopSampler.value(sampleBank.at(0),p,1,1,1,inf,1);		b = chopSampler.value(sampleBank.at(0),p,32,1,0.8,inf,32);		c = chopSampler.value(sampleBank.at(0),p,8,1,0.7,inf,32);		d = chopSampler.value(sampleBank.at(0),p,64,1,0.3,inf,8);		e = chopSampler.value(sampleBank.at(1),p,1,r,1,inf,16);		f = chopSampler.value(sampleBank.at(1),p,16,r,0.9,inf,16);		g = chopSampler.value(sampleBank.at(1),p,16,r,0.9,inf,16);		h = chopSampler.value(sampleBank.at(1),p,32,r,0.5,inf,4);				z = Mix.ar([			peder.value( zoner.value({ a}, Rect.new(0, 0, 0.5, 0.75)),1,0)*MIDIController.kr(1,11,0.0001,1.0) ,			peder.value( zoner.value({ c}, Rect.new(0.5, 0, 1, 0.75)),1,0)*MIDIController.kr(1,11,0.0001,1.0) ,			peder.value( zoner.value({ e}, Rect.new(0, 0.5, 0.5, 1)),1,0)*MIDIController.kr(1,12,0.0001,1.0) ,			peder.value( zoner.value({ g}, Rect.new(0.5, 0.5, 1, 1)),1,0)*MIDIController.kr(1,12,0.0001,1.0) ,			peder.value( zoner.value({ b}, Rect.new(0, 0, 0.5, 0.75)),0,1)*MIDIController.kr(1,11,0.0001,1.0) ,			peder.value( zoner.value({ d}, Rect.new(0.5, 0, 1, 0.75)),0,1)*MIDIController.kr(1,11,0.0001,1.0) ,			peder.value( zoner.value({ f}, Rect.new(0, 0.5, 0.5, 1)),0,1)*MIDIController.kr(1,12,0.0001,1.0) ,			peder.value( zoner.value({ h}, Rect.new(0.5, 0.5, 1, 1)),0,1)*MIDIController.kr(1,12,0.0001,1.0) 				]);				y = midiKey.value(sampleBank.at(2))*MIDIController.kr(1,13,0.0001,7.0);				x = synthKey.value(8)*MIDIController.kr(1,91,0.0001,8,'linear');				Mix.ar([z+reverb.value(y+x,0.3),z+reverb.value(y+x,0.4)]);				//Pan2.ar(z,-1,1) + Pan2.ar(x+y,1,1);	});wind.close;)