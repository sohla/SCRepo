{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf270
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red191\green0\blue0;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 (\
	\cf3 SynthDef\cf2 (\
		\cf4 "simpleSine"\cf2 ,\{\
			\cf3 arg\cf2  freq=440,amp=0.1,rate=2.0;\
			\cf3 var\cf2  trg,sig;\
			trg = \cf3 Decay2\cf2 .ar(\cf3 Impulse\cf2 .ar(rate,0,0.3), 0.01, 0.3);\
			sig = \cf3 SinOsc\cf2 .ar(freq,0,trg*amp);\
			\cf3 Out\cf2 .ar(0,[sig,sig])\
		\}\
	).send(s);\
)\
\
\
(\
	\cf3 var\cf2  window = \cf3 SCWindow\cf2 .new(\cf4 ""\cf2 ,\cf3 Rect\cf2 (600, 320, 700, 440)).front;\
	\cf3 var\cf2  numChannels = 3;\
\
	\cf3 var\cf2  sceneLists = \cf3 Array\cf2 .new(numChannels);\
	\cf3 var\cf2  patchLists = \cf3 Array\cf2 .new(numChannels);\
	\cf3 var\cf2  groups = \cf3 Array\cf2 .new(numChannels);\
	\cf3 var\cf2  instruments = \cf3 Array\cf2 .new(numChannels);\
	\
	\cf3 var\cf2  fscope;\
\
	\
	\
	numChannels.do(\{\cf3 |i|\cf2 \
		\
		patchLists.add(\cf3 Dictionary\cf2 []);\
\
		\cf5 // build groups and synths\cf2 \
		groups.add(	\
		\
			\cf3 Group\cf2 .new();\
		);\
\
		\cf3 Synth\cf2 (\cf4 "simpleSine"\cf2 ,[\cf4 "freq"\cf2 ,240 + (i*480)],groups.at(i),\cf6 \\addToTail\cf2 );\
		\
		\
		\cf5 // turn all groups off\cf2 \
		s.sendMsg(\cf4 "/n_run"\cf2 , groups.at(i).nodeID, \cf3 false\cf2 );\
\
	\});\
\
	\
	\
	numChannels.do(\{\cf3 |i|\cf2 \
		\cf3 var\cf2  file = \cf3 CSVFileReader\cf2 .read(\cf4 "patchlist"\cf2 ++(i+1)++\cf4 ".sc"\cf2 ,\cf3 true\cf2 ,\cf3 true\cf2 );\
		\cf3 var\cf2  scl = \cf3 Array\cf2 .new(file.size);\
		\cf3 var\cf2  args = \cf3 Array\cf2 .new(file.size);\
\
		\cf5 //file.postln;\cf2 \
\
		\cf5 //NodeWatcher.register(instruments.at(i));\cf2 \
		\
\
		\cf5 // put patch name (file.at(0)) into list and args\cf2 \
		file.size.do(\{\cf3 |j|\cf2 \
			scl.add(file.at(j).at(0));\
			args.add(file.at(j).copyToEnd(1));\
		\});\
		\
		\cf5 // add patch names to gui\cf2 \
		sceneLists.add(scl);\
\
		\cf5 // need to itr thru each set of args, \cf2 \
		file.size.do(\{\cf3 arg\cf2  k;\
			\
			\cf3 var\cf2  cmds = \cf3 Array\cf2 .new(25);\
	\
			\cf5 // seperate using "+", and create sets\cf2 \
			cmds = args.at(k).separate(\{ \cf3 arg\cf2  a, b; a == \cf4 "+"\cf2  \});\
			\
			\cf5 // if odd size args (ie there is a "+") remove it\cf2 \
			cmds.size.do(\{ \cf3 |m|\cf2 \
				if ( (cmds.at(m).size).odd,\{\
					cmds.at(m).removeAt(cmds.at(m).size-1);\
				\});\
			\});\
\
			cmds.size.do(\{\cf3 |j|\cf2 \
				cmds.at(j).size.do(\{\cf3 |n|\cf2 \
				\
					\
					if(cmds.at(j).at(n).asFloat != 0 ,\{\
						\cf5 //"float".postln;\cf2 \
						cmds.at(j).put(n,cmds.at(j).at(n).asFloat);\
					\},\{\
						\cf5 //"not float".postln;\cf2 \
					\});\
					\
					\cf5 // set each group's nodeID from patch list\cf2 \
					if(n==1,\{\
						cmds.at(j).put(1,groups.at(cmds.at(j).at(1)-1).nodeID);\
					\});\
				\});\
			\});\
			\
			cmds.postln;\
			\
			\cf5 //pass as server messages\cf2 \
			patchLists.at(i).put(sceneLists.at(i).at(k),cmds);\
		\
		\});\
\
	\});\
	\
	numChannels.do(\{\cf3 |i|\cf2 \
\
		\cf3 var\cf2  ns = i*220;\
		\cf3 var\cf2  listView;\
		\
		\
		\cf3 SCStaticText\cf2 .new(window,\cf3 Rect\cf2 (10+ns, 10, 140, 20))\
			.string_(\cf4 "CHANNEL "\cf2  + (i+1))\
			.action_\{\cf3 |v|\cf2  \};\
	\
		listView = \cf3 SCListView\cf2 .new(window,\cf3 Rect\cf2 (10+ns, 40, 200, 240))\
			.items_(sceneLists.at(i))\
			.action_\{\cf3 |v|\cf2  \
			\
			\
				patchLists.at(i).at(listView.items[v.value]).postln;\
				s.listSendBundle(0.1,patchLists.at(i).at(listView.items[v.value]));\
	\
			\};\
	\
	\
	\
		\cf3 SCButton\cf2 .new(window,\cf3 Rect\cf2 (160+ns, 10, 40, 20))\
			.states_([ 	[ \cf4 "stop"\cf2 , \cf3 Color\cf2 (0.0, 0.0, 0.0, 1.0), \cf3 Color\cf2 (1.0, 0.0, 0.0, 1.0) ],\
						[ \cf4 "go"\cf2 , \cf3 Color\cf2 (0.0, 0.0, 0.0, 1.0), \cf3 Color\cf2 (0.0, 1.0, 0.0, 1.0) ]])\
			.action_\{\cf3 |v|\cf2  \
			\
				\
				\cf5 //instruments.at(i).isPlaying;\cf2 \
				\cf5 //instruments.at(i).isRunning;\cf2 \
								\
				\
				s.sendMsg(\cf4 "/n_run"\cf2 ,groups.at(i).nodeID,v.value);\
				\
				\
				if(v.value == 1,\{\
					\cf5 //listView.items[listView.value].postln;\cf2 \
					s.listSendBundle(0.1,patchLists.at(i).at(listView.items[listView.value]));\
				\});\
			\};\
		\cf3 SCButton\cf2 .new(window,\cf3 Rect\cf2 (170+ns, 280, 20, 20))\
			.states_([ 	[ \cf4 "p"\cf2 , \cf3 Color\cf2 (0.0, 0.0, 0.0, 1.0), \cf3 Color\cf2 (1.0, 0.0, 0.0, 1.0) ]])\
			.action_\{\cf3 |v|\cf2  \
				listView.valueAction = listView.value - 1;\
			\};\
		\cf3 SCButton\cf2 .new(window,\cf3 Rect\cf2 (190+ns, 280, 20, 20))\
			.states_([ 	[ \cf4 "n"\cf2 , \cf3 Color\cf2 (0.0, 0.0, 0.0, 1.0), \cf3 Color\cf2 (1.0, 0.0, 0.0, 1.0) ]])\
			.action_\{\cf3 |v|\cf2  \
				listView.valueAction = listView.value + 1;\
			\};\
	\
	\
		fscope = \cf3 SCFreqScope\cf2 .new(window,\cf3 Rect\cf2 (10+ns, 310, 200, 120))\
			.action_\{\cf3 |v|\cf2  \};\
\
	\});\
\
\
\pard\pardeftab560\ql\qnatural
\cf2 	s.queryAllNodes;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \
	\cf5 //events\cf2 \
	\
	\
	window.onClose = \{\
		numChannels.do(\{\cf3 |i|\cf2 \
			\
			s.sendMsg(\cf4 "/n_free"\cf2 ,groups.at(i).nodeID);\
			\cf5 //fscope.kill;\cf2 \
\pard\pardeftab560\ql\qnatural
\cf2 			s.queryAllNodes;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\
		\});\
	\}\
		\
)	\
}