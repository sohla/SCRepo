{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf270
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
\red0\green23\blue179;\red53\green112\blue29;\red163\green25\blue23;}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf0 \
(\
\cf2 SynthDef\cf0 (\cf3 \\AHPitchShifter\cf0 , \{\cf2 |out=0, channel = 0, grainSize=0.3, pitch = 1.0|\cf0 \
	\cf2 var\cf0  signal,source;\
	signal =  \cf2 SoundIn\cf0 .ar(channel);\
	\
	source = \cf2 PitchShift\cf0 .ar(signal, \
				grainSize, 		\
				pitch,\cf4 //MouseY.kr(0.8, 1.2,0.1),\cf0 \
				0.001, 			\cf4 // pitch dispersion\cf0 \
				\cf2 MouseX\cf0 .kr(0.001,0.03,0.2)	\cf4 // time dispersion\cf0 \
		);\
\
	\
	\cf2 Out\cf0 .ar(out,[source,source]);\
\}).send(s);\
)\
\
\
(\
\cf2 SynthDef\cf0 (\cf3 \\AHSimpleDelay\cf0 , \{\cf2 |out=0, channel = 0, delay|\cf0 \
	\cf2 var\cf0  signal;\
	signal =  \cf2 In\cf0 .ar(out,2);\
	\
	\cf2 ReplaceOut\cf0 .ar(out,\
		  	\cf2 DelayN\cf0 .ar(signal, \
				delay, 		\
				delay,\
				mul:0.5\
			)\
	);\
\}).send(s);\
)\
\
(\
\pard\pardeftab560\ql\qnatural
\cf5 SynthDef\cf0 (\cf6 \\FreeVerb2x2\cf0 , \{\cf5 |outbus, mix = 0.25, room = 0.15, damp = 0.5, amp = 1.0|\
\pard\pardeftab560\ql\qnatural
\cf0 	\cf5 var\cf0  signal;\
\
	signal = \cf5 In\cf0 .ar(outbus, 2);\
\
	\cf5 ReplaceOut\cf0 .ar(outbus,\
		\cf5 FreeVerb2\cf0 .ar( \cf7 // FreeVerb2 - true stereo UGen\
\cf0 			signal[0], \cf7 // Left channel\
\cf0 			signal[1], \cf7 // Right Channel\
\cf0 			mix, room, damp, amp)); \cf7 // same params as FreeVerb 1 chn version\
\cf0 \
\}).send(s);\
)\
\
\
\
\
g = \cf2 Group\cf0 .new();\
f = \cf2 Group\cf0 .new();\
\
s.queryAllNodes;\
\
\
a = \cf2 Synth\cf0 (\cf3 \\AHPitchShifter\cf0 , [\cf3 \\out\cf0 , 0, \cf3 \\channel\cf0 , 0, \cf3 \\pitch\cf0 , 0.5])\
a = \cf2 Synth\cf0 (\cf3 \\AHPitchShifter\cf0 , [\cf3 \\out\cf0 , 0, \cf3 \\channel\cf0 , 1, \cf3 \\pitch\cf0 , 1.5])\
\
\
a = \cf2 Synth\cf0 (\cf3 \\AHPitchShifter\cf0 , [\cf3 \\out\cf0 , 0, \cf3 \\channel\cf0 , 0, \cf3 \\pitch\cf0 , 0.5],g,addAction:\cf3 \\addToTail\cf0 );\
b = \cf2 Synth\cf0 (\cf3 \\AHPitchShifter\cf0 , [\cf3 \\out\cf0 , 0, \cf3 \\channel\cf0 , 1, \cf3 \\pitch\cf0 , 1.5],f,addAction:\cf3 \\addToTail\cf0 );\
\
s.queryAllNodes;\
\
c = \cf2 Synth\cf0 (\cf3 \\AHSimpleDelay\cf0 , [\cf3 \\out\cf0 , 0, \cf3 \\channel\cf0 , 0, \cf3 \\delay\cf0 , 0.5],g,addAction:\cf3 \\addToTail\cf0 )\
d = \cf2 Synth\cf0 (\cf3 \\AHSimpleDelay\cf0 , [\cf3 \\out\cf0 , 0, \cf3 \\channel\cf0 , 1, \cf3 \\delay\cf0 , 0.9],f,addAction:\cf3 \\addToTail\cf0 )\
\
\
\
d.set(\\delay,0.001);\
c.free;\
\
\
e = \cf2 Synth\cf0 (\cf3 \\\cf6 FreeVerb2x2\cf0 , [\cf3 \\out\cf0 , 0, \cf3 \\room,0.9,\\mix,0.9\cf0 ],f,addAction:\cf3 \\addToTail\cf0 )\
\
e.set(\\room,0.3,\\mix,0.2);\
e.set(\\amp,10);\
\
\
\
f = \cf2 Synth\cf0 (\cf3 \\\cf6 FreeVerb2x2\cf0 , [\cf3 \\out\cf0 , 0, \cf3 \\room,0.4,\\mix,0.6\cf0 ],g,addAction:\cf3 \\addToTail\cf0 )\
f.set(\\amp,4);\
\
a.free;\
x.free;\
b.free;\
y.free;\
g.free;\
f.free;\
d.free;\
}