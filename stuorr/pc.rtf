{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf270
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 //  Particlechamber\cf3 \
\cf2 //  by Derek Holzer\cf3 \
\cf2 //	ported from puredata by refFrik\cf3 \
\cf2 //	requires the FreeVerb2 plug-in\cf3 \
\
\cf2 //	quickstart:\cf3 \
\cf2 //	load a mono soundfile with the grey button labelled 0\cf3 \
\cf2 //	start the granulator with the big red button in the upper left corner\cf3 \
\
\
\cf2 /*\
GUI.cocoa;\
GUI.swing;\
*/\cf3 \
\
(\
\cf2 //--settings\cf3 \
\cf4 var\cf3  numSamples= 8;\
\cf4 var\cf3  numVoices= 32;\
\cf4 var\cf3  fontName= \cf5 "Courier"\cf3 ;\
\cf4 var\cf3  busOutIndex= 0;								\cf2 //main stereo sound output bus\cf3 \
\cf4 var\cf3  windowShape= \cf6 'wel'\cf3 ;								\cf2 //lin, sin, wel, cub, sqr\cf3 \
\cf4 var\cf3  maxLength= 5;									\cf2 //max grain size in seconds\cf3 \
\
\cf2 //--variables\cf3 \
\cf4 var\cf3 	guiWin, docWin,								\cf2 //main and readme windows\cf3 \
	guiOff, guiLen,								\cf2 //variables needed for auto gui update\cf3 \
	stopTime= 0,									\cf2 //float that holds when user asked to stop\cf3 \
	stopTimes= 0.dup(numVoices),					\cf2 //array of differences from stopTime\cf3 \
	locator,										\cf2 //interpolates offsets and adds jitter\cf3 \
	routines,										\cf2 //array of engines that updates synths\cf3 \
	samples,										\cf2 //array of buffers\cf3 \
	sample,										\cf2 //current buffer index (sample_number)\cf3 \
	grp,											\cf2 //group for all synths\cf3 \
	synMix, synRev,								\cf2 //a mixer and a reverb synth\cf3 \
	busMix, busRev,								\cf2 //internal busses\cf3 \
	spd= 0,										\cf2 //scan_speed in sec\cf3 \
	spdFactor,									\cf2 //scale factor for scan_speed (gear)\cf3 \
	jit= 0.1,										\cf2 //jitter for offsets in percent\cf3 \
	voices= 1,									\cf2 //number of active voices (vox)\cf3 \
	offTrg= 0.1, offSrc= 0.1,						\cf2 //target and source for interpolation\cf3 \
	offMin= 0.1, offSprd= 0.1,						\cf2 //offset of start position in percent\cf3 \
	envMin= 0.1, envSprd= 0.05,						\cf2 //envelope (atk/rel) in percent\cf3 \
	susMin= 0.1, susSprd= 0.1,						\cf2 //length in percent\cf3 \
	ampMin= 0.75, ampSprd= 0.2,						\cf2 //gain in percent\cf3 \
	panSprd= 0.5,									\cf2 //pan spread in percent\cf3 \
	async= 0.5;									\cf2 //mute probability in percent\cf3 \
\
\cf2 //--setup\cf3 \
\cf4 var\cf3  init= \{\
	\cf5 "\\nparticlechamber initialising..."\cf3 .postln;\
	\cf4 Routine\cf3 .run\{\
		\cf4 var\cf3  hang= \cf4 Condition\cf3 .new;\
		s.latency= 0.05;\
		s.bootSync(hang);\
		initBuffers.value;\
		s.sync(hang);\
		initSynthDefs.value;\
		s.sync(hang);\
		initSynths.value;\
		s.sync(hang);\
		\{initGui.value\}.defer;\
		\cf4 CmdPeriod\cf3 .doOnce(\{free.value\});\
		1.wait;\
		engine.value;\
	\};\
\};\
\cf4 var\cf3  initBuffers= \{\
	samples= \{\cf4 Buffer\cf3 (s, 0, 1)\}.dup(numSamples);		\cf2 //make room - no loading yet\cf3 \
\};\
\cf4 var\cf3  initSynthDefs= \{\
	\cf4 SynthDef\cf3 (\cf6 \\particlechamberReverb\cf3 , \{\cf4 |in= 0, out= 0, room= 0.85, damp= 0.5, mute= 0, amp= 0.85|\cf3 \
		\cf4 var\cf3  input= \cf4 In\cf3 .ar(in, 2);\
		\cf4 var\cf3  z= \cf4 FreeVerb2\cf3 .ar(input[0], input[1], 1, room, damp, amp*mute);\
		\cf4 Out\cf3 .ar(out, z+input);\
	\}, #[\cf6 \\ir\cf3 , \cf6 \\ir\cf3 , 0.05, 0.05, 0.05, 0.05]).send(s);\
	\cf4 SynthDef\cf3 (\cf6 \\particlechamberMixer\cf3 , \{\cf4 |in= 0, out= 0, pan= 0, amp= 0.85|\cf3 \
		\cf4 var\cf3  input= \cf4 In\cf3 .ar(in, 2);\
		\cf4 var\cf3  z= \cf4 Balance2\cf3 .ar(input[0], input[1], pan, amp);\
		\cf4 Out\cf3 .ar(out, z);\
	\}, #[\cf6 \\ir\cf3 , \cf6 \\ir\cf3 , 0.05, 0.05]).send(s);\
	\cf4 SynthDef\cf3 (\cf6 \\particlechamberGranReader\cf3 , \{\cf4 |out= 0, bufnum, off= 0, pan= 0, env= 0, sus= 1, amp= 1|\cf3 \
		\cf4 var\cf3  e= \cf4 EnvGen\cf3 .ar(\cf4 Env\cf3 (#[0, 1, 1, 0], [env, sus, env], windowShape), 1, amp, 0, 1, 2);\
		\cf4 var\cf3  z= \cf4 PlayBuf\cf3 .ar(1, bufnum, \cf4 BufRateScale\cf3 .ir(bufnum), 1, \cf4 BufFrames\cf3 .ir(bufnum)*off, 0);\
		\cf4 Out\cf3 .ar(out, \cf4 Pan2\cf3 .ar(z*e, pan));\
	\}, #[\cf6 \\ir\cf3 , \cf6 \\ir\cf3 , \cf6 \\ir\cf3 , \cf6 \\ir\cf3 , \cf6 \\ir\cf3 , \cf6 \\ir\cf3 , \cf6 \\ir\cf3 ]).send(s);\
\};\
\cf4 var\cf3  initSynths= \{\
	grp= \cf4 Group\cf3 (s);\
	busMix= \cf4 Bus\cf3 .audio(s, 2);\
	busRev= \cf4 Bus\cf3 .audio(s, 2);\
	synMix= \cf4 Synth\cf3 .tail(grp, \cf6 \\particlechamberMixer\cf3 , [\cf6 \\in\cf3 , busMix.index, \cf6 \\out\cf3 , busRev.index]);\
	synRev= \cf4 Synth\cf3 .tail(grp, \cf6 \\particlechamberReverb\cf3 , [\cf6 \\in\cf3 , busRev.index, \cf6 \\out\cf3 , busOutIndex]);\
\};\
\
\cf2 //--main\cf3 \
\cf4 var\cf3  engine= \{\
	\cf4 var\cf3  len= 0, off= 0;\
	\cf5 "particlechamber running..."\cf3 .postln;\
	locator= \cf4 Routine\cf3 \{\
		\cf4 inf\cf3 .do\{\
			\{\
				guiOff.value_(off);				\cf2 //update gui current_position\cf3 \
				guiLen.value_(len);				\cf2 //update gui ave_grain_length\cf3 \
			\}.defer;\
			if(offMin<offTrg, \{\
				offMin= (offMin+(offTrg-offSrc/(spd.max(0.01)*spdFactor)).abs+(jit.rand2*0.5)).max(0);\
			\}, \{\
				offMin= (offMin-(offTrg-offSrc/(spd.max(0.01)*spdFactor)).abs+(jit.rand2*0.5)).max(0);\
			\});\
			0.1.wait;\
		\};\
	\};\
	routines= \{\cf4 |i|\cf3 								\cf2 //one for each voice\cf3 \
		\cf4 Routine\cf3 \{\
			\cf4 var\cf3 	sus, env, amp;\
			stopTimes[i].wait;\
			stopTimes[i]= 0;\
			while(\{stopTime==0\}, \{\
				if(i<voices, \{					\cf2 //vox filter\cf3 \
					off= (offMin+offSprd.rand2).fold(0, 1).max(0.0001);\
					sus= (susMin*maxLength+0.001+(susSprd.rand2*sample.duration)).max(0.0001);\
					env= (envMin*0.2+(envSprd.rand2*0.5)).max(0.002);\
					len= env*2+sus;\
					amp= (ampMin+ampSprd.rand2).max(0);\
					\cf4 Synth\cf3 .head(grp, \cf6 \\particlechamberGranReader\cf3 , [\
						\cf6 \\out\cf3 , busMix.index,\
						\cf6 \\bufnum\cf3 , sample.bufnum,\
						\cf6 \\off\cf3 , off,\
						\cf6 \\pan\cf3 , panSprd.rand2,\
						\cf6 \\env\cf3 , env,\
						\cf6 \\sus\cf3 , sus,\
						\cf6 \\amp\cf3 , amp*async.coin.binaryValue\
					]);\
					len.wait;						\cf2 //time in seconds\cf3 \
				\}, \{\
					0.01.wait;					\cf2 //poll rate for voices filter\cf3 \
				\});\
			\});\
			stopTimes[i]= \cf4 Main\cf3 .elapsedTime-stopTime;\
		\};\
	\}.dup(numVoices);\
\};\
\
\cf2 //--cleanup\cf3 \
\cf4 var\cf3  free= \{\
	\cf5 "\\nparticlechamber stopping..."\cf3 .postln;\
	locator.stop;\
	routines.do\{\cf4 |x|\cf3  x.stop\};\
	busMix.free;\
	busRev.free;\
	synRev.free;\
	synMix.free;\
	grp.free;\
	samples.do\{\cf4 |x|\cf3  x.free\};\
	guiWin.onClose_(\cf4 nil\cf3 );\
	if(guiWin.isClosed.not, \{guiWin.close\});\
	if(docWin.notNil, \{\
		docWin.onClose_(\cf4 nil\cf3 );\
		if(docWin.isClosed.not, \{docWin.close\});\
	\});\
\};\
\
\cf2 //--gui\cf3 \
\cf4 var\cf3  initGui= \{\
	\cf4 var\cf3  vTitle, vSamples, vFile, vTable, vReverb, vMain, vCredit;\
	\cf4 var\cf3  guiSpd, guiTrg;\
	\cf4 var\cf3  guiRadioSample, guiRadioGears;				\cf2 //variables needed for radio buttons\cf3 \
	guiWin= \cf4 GUI\cf3 .window.new(\cf5 "particlechamber"\cf3 , \cf4 Rect\cf3 (250, 100, 675, 515), \cf4 false\cf3 );\
	guiWin.view.background_(\cf4 Color\cf3 .white);\
	guiWin.front;\
	guiWin.onClose_(\{free.value\});\
	\
	\cf2 //--title\cf3 \
	vTitle= \cf4 GUI\cf3 .compositeView.new(guiWin, \cf4 Rect\cf3 (10, 10, 450, 60))\
		.background_(\cf4 Color\cf3 .new255(224, 224, 224));\
	\cf4 GUI\cf3 .staticText.new(vTitle, \cf4 Rect\cf3 (15, 15, 200, 25))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 18))\
		.string_(\cf5 "Particlechamber"\cf3 );\
	\cf4 GUI\cf3 .staticText.new(vTitle, \cf4 Rect\cf3 (150, 45, 310, 25))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.string_(\cf5 ""\cf3 ++numVoices++\cf5 "-voice asynchronous granular synthesizer"\cf3 );\
	\
	\cf2 //--file_granulator\cf3 \
	vFile= \cf4 GUI\cf3 .compositeView.new(guiWin, \cf4 Rect\cf3 (10, 75, 450, 160))\
		.background_(\cf4 Color\cf3 .new255(68, 136, 240));\
	\cf4 GUI\cf3 .button.new(vFile, \cf4 Rect\cf3 (20, 85, 20, 20))		\cf2 //mute\cf3 \
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.states_([\
			[\cf5 ""\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .new255(252, 40, 40)],\
			[\cf5 "X"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .new255(252, 40, 40)]\
		])\
		.action_\{\cf4 |but|\cf3 \
			if(but.value==1, \{\
				locator.play;\
				stopTime= 0;\
				routines.do\{\cf4 |x|\cf3  x.reset; x.play\};\
			\}, \{\
				locator.stop;\
				stopTime= \cf4 Main\cf3 .elapsedTime;\
			\});\
		\};\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (55, 85, 20, 96))		\cf2 //volume\cf3 \
		.background_(\cf4 Color\cf3 .new255(40, 244, 244))\
		.value_(0.85)\
		.action_\{\cf4 |sld|\cf3  synMix.set(\cf6 \\amp\cf3 , sld.value.linlin(0, 1, -60, 6).dbamp)\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (95, 85, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "sample_number"\cf3 );\
	guiRadioSample= \{\cf4 |i|\cf3 							\cf2 //sample_number\cf3 \
		\cf4 GUI\cf3 .button.new(vFile, \cf4 Rect\cf3 (i*15+85, 85, 15, 15))\
			.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
			.states_([[\cf5 ""\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .clear], [\cf5 ""\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .black]])\
			.action_\{\cf4 |but|\cf3 \
				guiRadioSample.do\{\cf4 |x|\cf3  if(x!=but, \{x.value_(0)\})\};\
				if(but.value==1, \{\
					sample= samples[i];\
				\}, \{\
					but.value= 1;\
				\});\
			\};\
	\}.dup(numSamples);\
	guiRadioSample[0].valueAction_(1);\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (90, 110, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "envelope"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (85, 110, 100, 15))		\cf2 //envelope\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(envMin)\
		.action_\{\cf4 |sld|\cf3  envMin= sld.value\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (90, 130, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "length"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (85, 130, 100, 15))		\cf2 //length\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(susMin)\
		.action_\{\cf4 |sld|\cf3  susMin= sld.value\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (90, 150, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "gain"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (85, 150, 100, 15))		\cf2 //gain\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(ampMin)\
		.action_\{\cf4 |sld|\cf3  ampMin= sld.value\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (90, 170, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "stereo_spread"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (85, 170, 100, 15))		\cf2 //stereo_spread\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(panSprd)\
		.action_\{\cf4 |sld|\cf3  panSprd= sld.value\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (90, 190, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "async"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (85, 190, 100, 15))		\cf2 //async\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(async)\
		.action_\{\cf4 |sld|\cf3  async= sld.value\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (90, 210, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "jitter"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (85, 210, 100, 15))		\cf2 //jitter\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(jit)\
		.action_\{\cf4 |sld|\cf3  jit= sld.value\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (235, 110, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "range"\cf3 );\
	\cf4 GUI\cf3 .numberBox.new(vFile, \cf4 Rect\cf3 (190, 110, 40, 15))	\cf2 //range\cf3 \
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.value_(envSprd)\
		.action_\{\cf4 |num|\cf3  num.value= envSprd= num.value.clip(0, 1)\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (235, 130, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "range"\cf3 );\
	\cf4 GUI\cf3 .numberBox.new(vFile, \cf4 Rect\cf3 (190, 130, 40, 15))	\cf2 //range\cf3 \
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.value_(susSprd)\
		.action_\{\cf4 |num|\cf3  num.value= susSprd= num.value.clip(0, 1)\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (235, 150, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "range"\cf3 );\
	\cf4 GUI\cf3 .numberBox.new(vFile, \cf4 Rect\cf3 (190, 150, 40, 15))	\cf2 //range\cf3 \
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.value_(ampSprd)\
		.action_\{\cf4 |num|\cf3  num.value= ampSprd= num.value.clip(0, 1)\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (195, 170, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "pan"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (190, 170, 100, 15))		\cf2 //pan\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(0.5)\
		.action_\{\cf4 |sld|\cf3  synMix.set(\cf6 \\pan\cf3 , sld.value*2-1)\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (195, 190, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "vox"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vFile, \cf4 Rect\cf3 (190, 190, 100, 15))		\cf2 //vox\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.action_\{\cf4 |sld|\cf3  voices= (sld.value*(numVoices-1)+1).round.asInteger\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (345, 110, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "scan_target"\cf3 );\
	guiTrg= \cf4 GUI\cf3 .numberBox.new(vFile, \cf4 Rect\cf3 (300, 110, 40, 15))\cf2 //scan_target\cf3 \
		.boxColor_(\cf4 Color\cf3 .new255(60, 80, 252))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.value_(0);\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (345, 130, 130, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "scan_interpolation"\cf3 );\
	guiSpd= \cf4 GUI\cf3 .numberBox.new(vFile, \cf4 Rect\cf3 (300, 130, 40, 15))\cf2 //scan_interpolation\cf3 \
		.boxColor_(\cf4 Color\cf3 .new255(60, 80, 252))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.value_(spd);\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (345, 150, 120, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "current_position"\cf3 );\
	guiOff= \cf4 GUI\cf3 .numberBox.new(vFile, \cf4 Rect\cf3 (300, 150, 40, 15))\cf2 //current_position\cf3 \
		.boxColor_(\cf4 Color\cf3 .new255(60, 80, 252))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.value_(offMin);\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (345, 170, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "grain_spread"\cf3 );\
	\cf4 GUI\cf3 .numberBox.new(vFile, \cf4 Rect\cf3 (300, 170, 40, 15))	\cf2 //grain_spread\cf3 \
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.value_(offSprd)\
		.action_\{\cf4 |num|\cf3  num.value= offSprd= num.value.clip(0, 1)\};\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (345, 190, 120, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "ave_grain_length"\cf3 );\
	guiLen= \cf4 GUI\cf3 .numberBox.new(vFile, \cf4 Rect\cf3 (300, 190, 40, 15))\cf2 //ave_grain_length\cf3 \
		.boxColor_(\cf4 Color\cf3 .new255(60, 80, 252))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.value_(0);\
	\cf4 GUI\cf3 .staticText.new(vFile, \cf4 Rect\cf3 (320, 212, 130, 20))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 14))\
		.string_(\cf5 "file_granulator"\cf3 );\
	\
	\cf2 //--table_locator\cf3 \
	vTable= \cf4 GUI\cf3 .compositeView.new(guiWin, \cf4 Rect\cf3 (10, 240, 450, 200))\
		.background_(\cf4 Color\cf3 .new255(68, 136, 240));\
	\
	if(\cf4 GUI\cf3 .current==\cf4 CocoaGUI\cf3 , \{						\cf2 //ugly switch to get around inconsistency\cf3 \
		\
		\cf2 //--create table_locator for cocoa\cf3 \
		\cf4 GUI\cf3 .userView.new(vTable, vTable.bounds-\cf4 Rect\cf3 (0, 0, 0, 40))\
			.drawFunc_\{\
				\cf4 var\cf3  xx= vTable.bounds.left+10;\
				\cf4 var\cf3  yy= vTable.bounds.top+10;\
				\cf4 var\cf3  ww= vTable.bounds.width-20;\
				\cf4 var\cf3  hh= vTable.bounds.height-50;\
				\cf4 var\cf3  stepx= ww/(30-1);\
				\cf4 var\cf3  stepy= hh/(20-1);\
				\cf4 GUI\cf3 .pen.setSmoothing(\cf4 false\cf3 );\
				\cf4 Color\cf3 .white.set;\
				30.do\{\cf4 |x|\cf3 \
					\cf4 GUI\cf3 .pen.line(x*stepx+xx@yy, x*stepx+xx@(yy+hh));\
					20.do\{\cf4 |y|\cf3 \
						\cf4 GUI\cf3 .pen.line(xx@(y*stepy+yy), xx+ww@(y*stepy+yy));\
					\};\
				\};\
				\cf4 GUI\cf3 .pen.stroke;\
			\};\
		\cf4 GUI\cf3 .slider2D.new(vTable,\
				\cf4 Rect\cf3 (vTable.bounds.left+10, vTable.bounds.top+10,\
					vTable.bounds.width-20, vTable.bounds.height-50))\
			.knobColor_(\cf4 Color\cf3 .red)\
			.background_(\cf4 Color\cf3 .blue(0.2, 0.5))\
			.action_\{\cf4 |sld|\cf3 \
				offTrg= sld.x;					\cf2 //sample offset 0 - 1\cf3 \
				offSrc= offMin;\
				spd= sld.y*10;					\cf2 //interpolation time 0 - 10\cf3 \
				guiTrg.value_(offTrg);\
				guiSpd.value_(spd*spdFactor);\
			\};\
	\}, \{\
		\cf2 //--create table_locator for swing\cf3 \
		\cf4 GUI\cf3 .slider2D.new(vTable,\
				\cf4 Rect\cf3 (vTable.bounds.left+10, vTable.bounds.top+10,\
					vTable.bounds.width-20, vTable.bounds.height-50))\
			.knobColor_(\cf4 Color\cf3 .red)\
			.background_(\cf4 Color\cf3 .blue(0.2, 0.5))\
			.action_\{\cf4 |sld|\cf3 \
				offTrg= sld.x;					\cf2 //sample offset 0 - 1\cf3 \
				offSrc= offMin;\
				spd= sld.y*10;					\cf2 //interpolation time 0 - 10\cf3 \
				guiTrg.value_(offTrg);\
				guiSpd.value_(spd*spdFactor);\
			\};\
		\cf4 GUI\cf3 .userView.new(vTable, vTable.bounds-\cf4 Rect\cf3 (0, 0, 0, 40))\
			.drawFunc_\{\
				\cf4 var\cf3  xx= vTable.bounds.left+10;\
				\cf4 var\cf3  yy= vTable.bounds.top+10;\
				\cf4 var\cf3  ww= vTable.bounds.width-20;\
				\cf4 var\cf3  hh= vTable.bounds.height-50;\
				\cf4 var\cf3  stepx= ww/(30-1);\
				\cf4 var\cf3  stepy= hh/(20-1);\
				\cf2 //GUI.pen.setSmoothing(false);\cf3 \
				\cf4 GUI\cf3 .pen.strokeColor_(\cf4 Color\cf3 .white);\
				30.do\{\cf4 |x|\cf3 \
					\cf4 GUI\cf3 .pen.line(x*stepx+xx@yy, x*stepx+xx@(yy+hh));\
					20.do\{\cf4 |y|\cf3 \
						\cf4 GUI\cf3 .pen.line(xx@(y*stepy+yy), xx+ww@(y*stepy+yy));\
					\};\
				\};\
				\cf4 GUI\cf3 .pen.stroke;\
			\};\
	\});\
	\
	\cf4 GUI\cf3 .staticText.new(vTable, \cf4 Rect\cf3 (320, 410, 110, 20))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 14))\
		.string_(\cf5 "table_locator"\cf3 );\
	\
	\cf2 //--reverb\cf3 \
	vReverb= \cf4 GUI\cf3 .compositeView.new(guiWin, \cf4 Rect\cf3 (465, 75, 200, 160))\
		.background_(\cf4 Color\cf3 .new255(68, 136, 240));\
	\cf4 GUI\cf3 .button.new(vReverb, \cf4 Rect\cf3 (475, 85, 20, 20))		\cf2 //mute\cf3 \
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.states_([\
			[\cf5 ""\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .new255(252, 40, 40)],\
			[\cf5 "X"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .new255(252, 40, 40)]\
		])\
		.action_\{\cf4 |but|\cf3  synRev.set(\cf6 \\mute\cf3 , but.value)\};\
	\cf4 GUI\cf3 .slider.new(vReverb, \cf4 Rect\cf3 (510, 85, 20, 96))		\cf2 //volume\cf3 \
		.background_(\cf4 Color\cf3 .new255(40, 244, 244))\
		.value_(0.85)\
		.action_\{\cf4 |sld|\cf3  synRev.set(\cf6 \\amp\cf3 , sld.value.linlin(0, 1, -40, 6).dbamp)\};\
	\cf4 GUI\cf3 .staticText.new(vReverb, \cf4 Rect\cf3 (545, 90, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "room_size"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vReverb, \cf4 Rect\cf3 (540, 90, 100, 15))	\cf2 //room_size\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(0.85)\
		.action_\{\cf4 |sld|\cf3  synRev.set(\cf6 \\room\cf3 , sld.value)\};\
	\cf4 GUI\cf3 .staticText.new(vReverb, \cf4 Rect\cf3 (545, 110, 100, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "damping"\cf3 );\
	\cf4 GUI\cf3 .slider.new(vReverb, \cf4 Rect\cf3 (540, 110, 100, 15))	\cf2 //damping\cf3 \
		.background_(\cf4 Color\cf3 .clear)\
		.value_(0.5)\
		.action_\{\cf4 |sld|\cf3  synRev.set(\cf6 \\damp\cf3 , sld.value)\};\
	\cf2 /*GUI.slider.new(vReverb, Rect(540, 140, 100, 15))	//dry/wet\
		.background_(Color.clear)\
		.action_\{|sld| "not in use".postln\};\
	GUI.staticText.new(vReverb, Rect(545, 140, 100, 15))\
		.font_(GUI.font.new(fontName, 11))\
		.string_("dry/wet");\
	GUI.slider.new(vReverb, Rect(540, 160, 100, 15))	//stereo_width\
		.background_(Color.clear)\
		.action_\{|sld| "not in use".postln\};\
	GUI.staticText.new(vReverb, Rect(545, 160, 100, 15))\
		.font_(GUI.font.new(fontName, 11))\
		.string_("stereo_width");*/\cf3 \
	\cf4 GUI\cf3 .staticText.new(vReverb, \cf4 Rect\cf3 (600, 212, 100, 20))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 14))\
		.string_(\cf5 "reverb"\cf3 );\
	\
	\cf2 //--main\cf3 \
	vMain= \cf4 GUI\cf3 .compositeView.new(guiWin, \cf4 Rect\cf3 (465, 240, 200, 200))\
		.background_(\cf4 Color\cf3 .new255(68, 136, 240));\
	\cf4 GUI\cf3 .button.new(vMain, \cf4 Rect\cf3 (475, 250, 100, 20))		\cf2 //readme\cf3 \
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.states_([[\cf5 "README"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .clear]])\
		.action_\{\
			docWin= \cf4 GUI\cf3 .window.new(\cf5 "README"\cf3 , \cf4 Rect\cf3 (100, 100, 800, 780), \cf4 false\cf3 );\
			docWin.view.background_(\cf4 Color\cf3 .white);\
			docWin.front;\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (230, 10, 350, 20))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
				.string_(\cf5 "Particlechamber by Derek Holzer [Umatic.nl]"\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (10, 50, 380, 80))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "Particlechamber is a 32-voice asynchronous granular synthesizer for real-time transformation of a soundfile. It is loosely based on the famous Travelizer instrument from Reaktor 3, however I think it's much better because it is FREE!"\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (10, 140, 380, 210))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "This abstraction can be used to time-stretch or -compress a soundfile, although there are other tools [such as Frank Barknecht's Synchgrain object] which do this 'nicer', but it's main strength is in generating clouds of sonic particles, time-scrambling a file, or creating abstract textures. If one does a bit of reverse engineering, it can also be used as a tool for learning about the techniques of granular synthesis. I have left a subpatch inside the granreader subpatch where others can add their own grain-level events, such as randomized or constant-Q filters or windowed envelopes, to see what is possible with this technique. Of course, I can only highly recommend Curtis Road's amazing book 'Microsound' for those interested in learning more."\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (400, 50, 380, 106))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "Particlechamber requires a few externals to run. It uses Freeverb~ for its reverb section [although you could easily replace it with another reverb], and uses Grid as a major GUI element [although you could hack your way around it if you can't install Grid by sending numbers directly to the table_locator subpatch. Look inside for details...]"\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (400, 170, 380, 40))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "It would be best to take Grid from the PD External Repository: http://pure-data.sourceforge.net"\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (400, 220, 380, 40))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "However, Yves Degoyon's Grid external can also be found here: http://ydegoyon.free.fr/software.html"\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (400, 270, 380, 40))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "The freeverb~ external can be downloaded here: http://www.akustische-kunst.org/puredata/main.html"\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (10, 400, 380, 20))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "Operation of Particlechamber:"\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (20, 430, 370, 65))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "Open the Load subpatch and click the bangs to load samples. It is better to do this before you start playing, because loading soundfiles can cause audible glitches in PD's performance. Sorry..."\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (20, 500, 370, 80))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "The red buttons mute and unmute the file granulator and the reverb. The large vertical sliders are gain for each section. The reverb is post-fader from the file granulator, and can be bypassed either by muting it or with the wet/dry slider."\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (20, 585, 370, 105))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "The envelope is a linear ramp, so a length of 0 means a pure triangular 'window' for each grain. [(envelope x 2)+ length= average grain length in ms]. Stereo_spread randomly pans each grain to a wider or lesser field. The range feature randomizes each parameter as a percentage plus or minus the given number."\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (400, 430, 380, 120))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "Asynch randomizes which grains are passed through, from almost none to all. Vox activates or deactivates each of the 32 voices. Grain_spread makes small adjustments in the read position, which can be used to either add a reverb- or chorus-like effect, or to completely time-smear a file. Jitter makes larger adjustments in the read position, resulting in various degrees of time-scrambling."\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (400, 555, 380, 105))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "The XY controller at the bottom determines the read position in the sample. This controller has an interpolation scale, adjustable by the gear-shift on the right. This means that Particlechamber will scan more slowly or quickly through the file depending on the cursor's Y position multiplied by the interpolation factor."\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (200, 700, 380, 50))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "Particlechamber is free software and comes without any warrenty that it will do ANYTHING like what I say it will. Enjoy it all the same."\cf3 )\
				.editable_(\cf4 false\cf3 );\
			\cf4 GUI\cf3 .textView.new(docWin, \cf4 Rect\cf3 (450, 750, 180, 20))\
				.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
				.string_(\cf5 "derek@umatic.nl"\cf3 )\
				.editable_(\cf4 false\cf3 );\
		\};\
	\
	numSamples.do\{\cf4 |i|\cf3 \
		\cf4 GUI\cf3 .button.new(vMain, \cf4 Rect\cf3 (i*15+475, 295, 15, 15))\
			.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
			.states_([[i.asString]])\
			.action_\{\
				\cf4 File\cf3 .openDialog(\cf5 ""\cf3 , \{\cf4 |path|\cf3 \
					\cf4 var\cf3  sf= \cf4 SoundFile\cf3 .openRead(path);\
					\cf4 var\cf3  ch= sf.numChannels;\
					sf.close;\
					if(ch==1, \{\
						samples[i].allocRead(path, 0, -1, \{\cf4 |buf|\cf3  \cf4 AppClock\cf3 .sched(0.1, \{buf.updateInfo; \cf4 nil\cf3 \})\});\
					\}, \{\
						\cf5 "sorry - only mono files"\cf3 .error;\
					\});\
				\}, \{\});\
			\};\
	\};\
	\cf4 GUI\cf3 .staticText.new(vMain, \cf4 Rect\cf3 (475, 310, 180, 15))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "click to load samples"\cf3 );\
	guiRadioGears= \{\cf4 |i|\cf3 \
		\cf4 GUI\cf3 .staticText.new(vMain, \cf4 Rect\cf3 (495, i*15+350, 40, 15))\
			.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
			.string_(\cf5 "x"\cf3 +10.pow(i));\
		\cf4 GUI\cf3 .button.new(vMain, \cf4 Rect\cf3 (475, i*15+350, 15, 15))\
			.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
			.states_([[\cf5 ""\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .clear], [\cf5 ""\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .black]])\
			.action_\{\cf4 |but|\cf3 \
				guiRadioGears.do\{\cf4 |x|\cf3  if(x!=but, \{x.value_(0)\})\};\
				if(but.value==1, \{\
					spdFactor= 10.pow(i);\
					guiSpd.value_(spd*spdFactor);\
				\}, \{\
					but.value= 1;\
				\});\
			\};\
	\}.dup(3);\
	guiRadioGears[1].valueAction_(1);\
	\cf4 GUI\cf3 .textView.new(vMain, \cf4 Rect\cf3 (550, 350, 110, 50))\
		.background_(\cf4 Color\cf3 .new255(68, 136, 240))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 11))\
		.string_(\cf5 "gear-shift for interpolation speed"\cf3 )\
		.editable_(\cf4 false\cf3 );\
	\
	\cf2 //--credit\cf3 \
	vCredit= \cf4 GUI\cf3 .compositeView.new(guiWin, \cf4 Rect\cf3 (465, 445, 200, 60))\
		.background_(\cf4 Color\cf3 .new255(224, 224, 224));\
	\cf4 GUI\cf3 .staticText.new(vCredit, \cf4 Rect\cf3 (500, 455, 120, 20))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.string_(\cf5 "derek@umatic.nl"\cf3 );\
	\cf4 GUI\cf3 .staticText.new(vCredit, \cf4 Rect\cf3 (500, 480, 180, 20))\
		.font_(\cf4 GUI\cf3 .font.new(fontName, 12))\
		.string_(\cf5 "pd->sc port by redFrik"\cf3 );\
\};\
\
init.value; \cf5 ""\cf3 ;\
)}